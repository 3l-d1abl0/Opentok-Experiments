 <html>
<head>
  <title> Testing Screen Sharing!</title>

    <link href="/css/app.css" rel="stylesheet" type="text/css">
    <script src="https://static.opentok.com/v2/js/opentok.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
</head>
<body>
  <!-- <div id="camera"></div> -->
  <div id="preview-container">
        <div id="screen-preview"></div>  
  </div>
  
  <div id="screen-container">
          <div id="show-screen"></div>
  </div>
  
  <div id="just-div"></div><br><br><br>
  <% if(role=='publisher'){ %>
                <div id="dash">
                  <button onclick="javascript:screenshare('screen');" id="startBtn" >Share Screen !</button><br><br>
                  <button onclick="javascript:stopSharing();" id="stopBtn" >Stop Sharing !!!</button><br><br>
                  <button onclick="javascript:screenshare('window');" id="winBtn" >Share Window !</button><br><br>
                  <button onclick="javascript:#;" id="audioStart" >Start Audio !!!</button><br><br>
                  <button onclick="javascript:stopAudio();" id="audioStop" >Stop Audio !!!</button><br><br>
                </div>
    <% } %>
    <br><br><br><br>
    <div id="user-list"></div>
    <button onclick="javascript:disconnect();" id="disBtn" >Disconnect From Session !</button>


  <script type="text/javascript">

  <% if(role=='subscriber'){ %>
              $('#screen-preview').css('display','none');
    <% }else 
          if(role=='publisher') { %>
              $('#show-screen').css('display','none');
    <% }%>

    
    // Go to https://dashboard.tokbox.com/ to find your OpenTok
    // API key and generate a test session ID and token:
      var apiKey    = '<%= APIKey %>';
      var sessionId = '<%= session_id %>';
      var token     = '<%= tok %>';
      var my_name= '<%= user_name%>';

      var connectionCount =0;
      var my_conId='';
      var h = document.getElementById('screen-preview').clientHeight;
      var w = document.getElementById('screen-preview').clientWidth;
      var pubAudio, publisher;
      var screenSharingPublisher;

      // For Google Chrome only, register your extension by ID. You can
      // find it at chrome://extensions once the extension is installed.
      OT.registerScreenSharingExtension('chrome', 'pflmjbbflhmlhdcpepcjnmmkgmbdibbe');

      var session = OT.initSession(apiKey, sessionId);

    console.log('Session:  ');
    console.log(session);


    var uname=new Object();
    var fromData= new Object();

    window.onbeforeunload = function () {
      session.signal(
              {
                data: my_name,
                type: "remove"
              },
              function(error) {
                if (error) {
                  console.log("signal error (" + error.code + "): " + error.message);
                } else {
                  console.log("Remove signal sent to ");
                  return true;
                }
              }
            );
        //return "Do you really want to close?";
    };

    // Connect to the Session
    session.connect(token, function(error) { 
      alert('Connected to Session !');
      console.log("ERR:::: "+error);
      //console.log(session.connection.connectionId);
      my_conId=session.connection.connectionId;     

          <% if(role=='publisher'){ %>
                  //alert('Audio Sharing..... ');
                  

                  var pubOptions = {name:'instructorAudio',
                                    publishAudio:true, 
                                    publishVideo:false, 
                                    width: document.getElementById('just-div').clientWidth,
                                    height: document.getElementById('just-div').clientHeight
                                   };
                  publisher = OT.initPublisher('just-div', pubOptions);

                  session.publish(publisher, function(error) {
                      if (error) {
                        alert('Could not publish Audio : ' + error.message);
                      }else{
                        console.log('Instructor Audio: '+publisher);
                      }
                    });
          <% } %>

          <% if(role=='subscriber'){ %>
              
              var audioOptions = {name: 'studentAudio', publishAudio:true, publishVideo:false, };
                  pubAudio = OT.initPublisher('just-div', audioOptions);
                  session.publish(pubAudio, function(error) {
                      if (error) {
                        alert('Cannot publish audio ' + error.message);
                      }
                    });
              
              
          <% }%>
          session.signal( { data: my_name,
                            type:"newuser"
                          },
                          function(error) {
                            if (error) {
                              console.log("signal error (" + error.code + "): " + error.message);
                            } else {
                              console.log("Newuser signal sent.");
                            }
                          }
            );
    });

    // Subscribe to a newly created stream
    session.on('streamCreated', function(event) {
        console.log('New Stream::');
        console.log(event);
      //session.subscribe(event.stream);
          //alert('Connecting.... ');
          if(event.stream.name=="instructorAudio" || event.stream.name=="instructorScreen"){
              console.log(event.stream.name);
              session.subscribe(event.stream, 'show-screen', {
                  fitMode: 'replace',
                  width: document.getElementById('show-screen').clientWidth,
                  height: document.getElementById('show-screen').clientHeight
              });

              console.log('vidTracks');
              console.log(event.stream.getVideoTracks());
          }


          if(event.stream.name=="studentAudio"){
              var newDiv = document.createElement("div");
              newDiv.setAttribute("class", "invi");
              console.log('New audio stream from :: '+event.stream.connection.id);
              session.subscribe(event.stream, newDiv, {
                  fitMode: 'contain',
              });
              console.log('Sub to Student Audio');
          }


    });


    /*OT.getDevices(function(error, devices){
          console.log("Devices Err: "+error);
          console.log(devices);
    });*/

    session.on('streamDestroyed', function(event) {  
          
          console.log('Destroyed : XXXXXXXX  '+ event.reason);


          console.log(event);

          if (event.reason === 'mediaStopped') {
            // User clicked stop sharing
            //alert('mediaStopped');
          } else if (event.reason === 'forceUnpublished') {
            // A moderator forced the user to stop sharing.
            //alert('forceUnpublished');
          }else if(event.reason=== 'clientDisconnected'){
            //alert('clientDisconnected');
          }else if(event.reason=== 'networkDisconnected'){

          }
          
          if(event.stream.name=="instructorScreen"){
                      var newDiv = document.createElement("div");
                      newDiv.setAttribute("id", "show-screen");
                      document.getElementById('screen-container').appendChild(newDiv);
          }

    
    });

    session.on({

                connectionCreated: function (event) {
                          connectionCount++;
                          console.log(event.connection);
                          //alert(connectionCount + ' connections.');
                        },
                        connectionDestroyed: function (event) {
                          connectionCount--;
                          console.log(event);
                          //alert(connectionCount + ' connections.');
                        },
                        sessionDisconnected: function sessionDisconnectHandler(event) {
                          // The event is defined by the SessionDisconnectEvent class
                          //alert('Disconnected from the session.');
                          //console.log(event.connectionId);
                          //document.getElementById('disconnectBtn').css("display","none");
                          if (event.reason == 'networkDisconnected') {
                            //alert('Your network connection terminated.')
                            console.log(event.connectionId);
                          }
                        }


                      });



      session.on("signal:newuser", function(event) {
         console.log("Signal sent from "+event.data+" "+ event.from.id);
         console.log(event);
         var cId=event.from.id;
         //alert("Data: "+event.data);

         if(my_conId!=cId){
              uname[cId]={};  fromData[cId]=event.from;
              uname[cId].username=event.data;
              uname[cId].con_id=event.from.id;
              $("#user-list").append('<div id="def" data-c_id="'+cId+'">'+uname[cId].username+'</div>'); 
              console.log('New User ::');
              console.log(uname);
         }


          session.signal(
              {
                to: event.from,
                data: my_name,
                type: "update"
              },
              function(error) {
                if (error) {
                  console.log("signal error (" + error.code + "): " + error.message);
                } else {
                  console.log("Update signal sent to :"+ event.from.id);
                }
              }
            );


      });

      session.on("signal:mute",function(event){
            console.log('Publisher::: ');
            console.log(publisher);
            if(my_conId==event.from.id){
                publisher.publishAudio(false);
            }else{
                
                pubAudio.publishAudio(false);
                alert('You are muted');
            }
      });

      session.on("signal:unmute", function(event){
            if(my_conId==event.from.id){
                publisher.publishAudio(true);
            }else{
                pubAudio.publishAudio(true);
                alert('You are Unmuted');
            }
      });

      session.on("signal:update", function(event){
            console.log("Signal sent from "+event.data+" ::: "+ event.from.id);
            console.log(event.data);
            var cId=event.from.id;

                uname[cId]={}; fromData[cId]=event.from;
                uname[cId].username=event.data;
                uname[cId].con_id=cId;

                //uname[event.from.id].push({ username : event.data});
                //uname[event.from.id].push({ con_id : event.from.id});
                $("#user-list").append('<div id="def" data-c_id="'+cId+'" >'+uname[cId].username+'</div>');

                console.log('Update Users ::');
                console.log(uname);
      });   

      session.on("signal:remove", function(event){
            console.log("Signal sent from connection " + event.from.id+" for removal");
            console.log(event.data);
            //alert("From: "+event.from.connectionId);
                //uname.splice(event.data);
                //uname.splice(uname.indexOf(event.data),1);
                delete uname[event.from.id];    delete fromData[event.from.id];
                var new_data='';
                for (var id in uname){
                  //alert(uname[n_m]);
                  new_data+='<div id="def" data-c_id="'+uname[id].con_id+'">'+uname[id].username+'</div>';
                }
                $("#user-list").html(new_data);
                //alert(event.data);
      });   


    function screenshare(screenType) {
            if(typeof screenSharingPublisher === "undefined" || screenSharingPublisher== null){
              
            }else{              
              stopSharing();
            }

            var ele =  document.getElementById('screen-preview');
            if (typeof(ele) === 'undefined' && ele == null)
            { 
                var newDiv = document.createElement("div");
                    newDiv.setAttribute("id", "screen-preview");
                document.getElementById('preview-container').appendChild(newDiv);
            }

      OT.checkScreenSharingCapability(function(response) {

            console.log(response);
            console.log(response['supportedSources']);

          for(var key in response['supportedSources']){
                if (response.hasOwnProperty(key)) {
                  console.log(key + " -> " + response['supportedSources'][key]);
                }
          }


        if (!response.supported || response.extensionRegistered === false) {
          alert('This browser does not support screen sharing.');
        } else if (response.extensionInstalled === false) {
          alert('Please install the screen sharing extension and load your app over https.');
        } else {
          // Screen sharing is available. Publish the screen.

          screenSharingPublisher = OT.initPublisher('screen-preview',
                                    { name: 'instructorScreen',
                                      insertMode: "replace",
                                      mirror: false,
                                      publishAudio : true,
                                      videoSource: screenType,
                                      showControls: true,
                                      maxResolution: { width: 1280, height: 720 }, // max resolution to encode screen in
                                      width: w, // width of preview
                                      height: h, // height of preview
                                    });
          session.publish(screenSharingPublisher, function(error) {
            if (error) {
              alert('Could not share the screen: ' + error.message);
            }
          });
          //console.log('Incoming :');
          //console.log(screenSharingPublisher);
        }
      });
    }

    /*if(typeof screenSharingPublisher === "undefined" || screenSharingPublisher== null){ }
    else{
  
                screenSharingPublisher.on('mediaStopped', function(event) {

        // The user clicked stop.
        alert('Hap');

      });

    screenSharingPublisher.on('streamDestroyed', function(event) {
      alert('Happ');
          if (event.reason === 'mediaStopped') {
            Console.log('Destroyed ::: mediaStopped');
          } else if (event.reason === 'forceUnpublished') {
            Console.log('Destroyed ::: forceUnpublished');
          }
    });
    } */        

    function startAudio(){
      /*
        var pubOptions = {publishAudio:true, publishVideo:false};
        publisher = OT.initPublisher('just-div', pubOptions);

        session.publish(publisher, function(error) {
            if (error) {
              alert('Could not share the screen: ' + error.message);
            }
          });
      */
    }

    function stopAudio(){
        publisher.off("accessDenied accessDialogOpened accessDialogClosed accessAllowed streamCreated streamDestroyed");            
        publisher.destroy();
    }

    function stopSharing(){
            //alert('Stopped Sharing !');
            screenSharingPublisher.off("accessDenied accessDialogOpened accessDialogClosed accessAllowed streamCreated streamDestroyed");
            //  session.unpublish(screenSharingPublisher);
            screenSharingPublisher.destroy();

            var newDiv = document.createElement("div");
                newDiv.setAttribute("id", "screen-preview");
                document.getElementById('preview-container').appendChild(newDiv);

            screenSharingPublisher= undefined;
    }

    //Code to stop publishing to a session
    function disconnect() {

        session.signal(
              {
                data: my_name,
                type: "remove"
              },
              function(error) {
                if (error) {
                  alert("signal error ("+ error.code + "): " + error.message);
                } else {
                  console.log("Remove signal sent to ");
                }
              }
            );
        $("#user-list").html('');
        session.disconnect();
    }
    
    session.on("sessionDisconnected", function(event){
        console.log("sessionDisconnected event fired");
        alert('Disconnected !');
        console.log(event);
        // Session has been disconnected. Include any clean up code here

    });

    function ute(c_id,ty){
      alert('To : '+c_id+' '+ty);
      console.log('To : '+c_id+' '+ty);
      console.log(fromData[c_id]);
            session.signal( { to: fromData[c_id],
                              data: my_name,
                              type: ty
                            },
                            function(error) {
                              if (error) {
                                alert("signal error ("+ error.code + "): " + error.message);
                              } else {
                                console.log("Update signal sent to :"+ fromData[c_id].id);
                              }
                            }
                          );
        }

    <% if(role=='publisher'){ %>

        $('#user-list').on('click', '#def', function() {

            //alert(',,,,');
            if($(this).hasClass('mute')){
              $(this).removeClass('mute');
              var cId=$(this).data("c_id");

                ute(cId,'unmute');
            }
            else{
              $(this).addClass('mute');
              var cId=$(this).data("c_id");

                ute(cId,'mute');
            }
        });

    <% } %>

  </script>
</body>
</html>
